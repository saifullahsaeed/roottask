// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/**
 * Model Definitions
 */

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  refresh_token_expires_in Int?
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String            @id @default(cuid())
  name             String?
  email            String?           @unique
  emailVerified    DateTime?
  image            String?
  password         String?
  accounts         Account[]
  sessions         Session[]
  projects         Project[]
  assignedTasks    TaskAssignee[]
  File             File[]
  TaskComment      TaskComment[]
  workspaces       Workspace[]
  workspaceMembers WorkspaceMember[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Workspace {
  id            String            @id @default(cuid())
  name          String
  createdBy     String
  createdByUser User              @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  projects      Project[]
  members       WorkspaceMember[]
}

enum WorkspaceRole {
  ADMIN
  MEMBER
}

model WorkspaceMember {
  id          String        @id @default(cuid())
  workspaceId String
  workspace   Workspace     @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  userId      String
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  role        WorkspaceRole @default(MEMBER)
}

enum ProjectStatus {
  ACTIVE
  INACTIVE
  COMPLETED
  ON_HOLD
  ARCHIVED
}

model Project {
  id            String        @id @default(cuid())
  name          String
  status        ProjectStatus
  createdBy     String
  createdByUser User          @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  workspaceId   String
  workspace     Workspace     @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  taskFlows     TaskFlow[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model TaskFlow {
  id           String           @id @default(cuid())
  name         String
  description  String?
  projectId    String
  project      Project          @relation(fields: [projectId], references: [id], onDelete: Cascade)
  nodes        TaskNode[]
  dependencies TaskDependency[]
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt

  @@index([projectId])
}

// Task Related Models

enum TaskStatus {
  TODO
  IN_PROGRESS
  COMPLETED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
  BLOCKER
}

model Task {
  id          String           @id @default(cuid())
  title       String
  description String?
  status      TaskStatus       @default(TODO)
  priority    TaskPriority?
  startDate   DateTime?
  dueDate     DateTime?
  coverId     String?
  cover       TaskAttachment?  @relation(fields: [coverId], references: [id], onDelete: SetNull, name: "Cover")
  assignees   TaskAssignee[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  nodes       TaskNode[]
  comments    TaskComment[]
  attachments TaskAttachment[]
  checklist   TaskChecklist[]
}

model TaskAssignee {
  id        String   @id @default(cuid())
  taskId    String
  userId    String
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([taskId, userId])
  @@index([taskId])
  @@index([userId])
}

model TaskComment {
  id        String   @id @default(cuid())
  taskId    String
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // New fields for frontend features
  parentId    String? // For replies, null if it's a top-level comment
  parent      TaskComment?      @relation("CommentReplies", fields: [parentId], references: [id])
  replies     TaskComment[]     @relation("CommentReplies")
  isPinned    Boolean           @default(false)
  likes       TaskCommentLike[] // Track individual likes
  mentions    String[] // Array of user IDs mentioned in the comment
  attachments TaskAttachment[] // Use TaskAttachment model instead of JSON

  @@index([taskId])
  @@index([userId])
  @@index([parentId]) // For efficient reply queries
}

model TaskCommentLike {
  id        String      @id @default(cuid())
  commentId String
  comment   TaskComment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  userId    String
  createdAt DateTime    @default(now())

  @@unique([commentId, userId]) // Ensure one like per user per comment
  @@index([commentId])
  @@index([userId])
}

model TaskAttachment {
  id        String       @id @default(cuid())
  taskId    String
  task      Task         @relation(fields: [taskId], references: [id], onDelete: Cascade)
  userId    String[]
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  fileId    String
  file      File         @relation(fields: [fileId], references: [id], onDelete: Cascade)
  Task      Task[]       @relation(name: "Cover")
  comment   TaskComment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String?

  @@index([taskId])
  @@index([userId])
  @@index([commentId])
}

model TaskChecklist {
  id        String              @id @default(cuid())
  taskId    String
  task      Task                @relation(fields: [taskId], references: [id], onDelete: Cascade)
  userId    String
  content   String
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
  items     TaskChecklistItem[]

  @@index([taskId])
  @@index([userId])
}

model TaskChecklistItem {
  id              String        @id @default(cuid())
  userId          String
  content         String
  completed       Boolean       @default(false)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  TaskChecklistId String
  TaskChecklist   TaskChecklist @relation(fields: [TaskChecklistId], references: [id], onDelete: Cascade)

  @@index([TaskChecklistId])
  @@index([userId])
}

//file related models

model File {
  id              String           @id @default(cuid())
  name            String?
  type            String?
  size            Int?
  url             String
  thumbnail       String?
  userId          String?
  user            User?            @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  taskAttachments TaskAttachment[]

  @@index([userId])
}

// Flow Related Models

model TaskNode {
  id                 String           @id @default(cuid())
  type               String // e.g., "card", "input", "output"
  positionX          Float
  positionY          Float
  taskId             String
  task               Task             @relation(fields: [taskId], references: [id], onDelete: Cascade)
  flowId             String
  flow               TaskFlow         @relation(fields: [flowId], references: [id], onDelete: Cascade)
  sourceDependencies TaskDependency[] @relation("SourceNode")
  targetDependencies TaskDependency[] @relation("TargetNode")
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt

  @@index([flowId])
  @@index([taskId])
}

model TaskDependency {
  id         String   @id @default(cuid())
  type       String // e.g., "default", "smoothstep", "step"
  sourceId   String
  targetId   String
  sourceNode TaskNode @relation("SourceNode", fields: [sourceId], references: [id], onDelete: Cascade)
  targetNode TaskNode @relation("TargetNode", fields: [targetId], references: [id], onDelete: Cascade)
  flowId     String
  flow       TaskFlow @relation(fields: [flowId], references: [id], onDelete: Cascade)
  data       Json? // Store dependency-specific data
  style      Json? // Store dependency-specific style 
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([flowId])
  @@index([sourceId])
  @@index([targetId])
}
